neocomplcache

究極のVim的補完環境
                        Shougo

--------------------------------
まずは自己紹介

Shougo
Vim歴４年。だが、本格的にVimに目覚めたのはごく最近のこと。
Vimを使い始めたのは、Vimは多数の言語に対してsyntaxハイライトができたから。

--------------------------------
代表作
・bufstatus
・vimshell
・neocomplcache

今回はneocomplcacheについて話をします。

--------------------------------
neocomplcacheとは？

VimScriptによって実装された究極の補完環境。
タグ補完やディクショナリ補完も自前で実装しています。
高速化するために、並々ならぬ苦労が……。

--------------------------------
似た感じのスクリプト

・autocomplpop.vim
・auto-complete.el

--------------------------------
autocomplpop.vimの良いところ
・Vim標準の補完を呼ぶので高速
・一部の言語はオムニ補完にも対応
・情報が多い

autocomplpop.vimの悪いところ
・カスタマイズがしづらい
・補完機能はVimの機能に制限されてしまう
・ATOK X3で暴走する
・日本語入力中も補完候補が出る
・最近更新されてない

--------------------------------
auto-complete.elの良いところ
・補完機能のカスタマイズがしやすい
・キーバインドのカスタマイズが容易
・情報が多い
・プラグインも豊富

auto-complete.elの悪いところ
・Emacsen専用なので、Vimmerには使えない
・補完候補のスクロールができない
・標準では候補の絞り込みができない
・標準では部分マッチが使えない
・補完候補の情報が表示されない

--------------------------------
neocomplcacheの良いところ
・候補の絞り込みができる
・部分マッチもできる
・単語の出現頻度によってソートができる
・補完機能のカスタマイズがしやすい
・補完機能はほとんど自前実装
・毎週更新？

neocomplcacheの悪いところ
・情報はほとんど無い
・補完機能のカスタマイズがしやすいが、ドキュメントはない
・候補が多いと遅くなる（ことがある）
・開発が早いので、不安定（なことがある）
・内部でcompletefuncを使っているので、completefuncが設定されている場合は動作しない

--------------------------------
neocomplcacheの歴史

これまで愛用していたautocomplpop.vimが
Linux GVim上のATOK X3でおかしくなる
　　　　　　↓
それなら自分で作ってしまえ！
　　　　　　↓
部分マッチも欲しいなぁとか思い始める
　　　　　　↓
それなら自分で作ってしまえ！
　　　　　　↓
補完が遅いなぁと思い始める
　　　　　　↓
それなら結果をキャッシュしてしまえ！
　　　　　　↓
　　　　さらなる暴走
　　　　　　↓
　　そして現在に至る……

詳しくはChangeLog:で。

--------------------------------
neocomplcacheの代表的機能

・キーワードの使用頻度によるランク付け
・シンタックスごとのキーワード補完
・部分マッチ
・数字キーによるクイックマッチ
・ディクショナリ補完、タグ補完
・ワイルドカードによる検索結果の絞り込み
・結果のキャッシュによる高速化
・MFU Dictionaryによる自動辞書登録
・ディレクトリ補完
・カーソル後方のキーワードに応じた補完
・SmartCase
・豊富なカスタマイズ項目
・文脈依存補完（2-gram completion）

--------------------------------
キーワードの使用頻度によるランク付け

キーワード収集を自前で行っているため、可能になりました。
キーワードの使用回数を記録し、補完時の順位に反映させることができます。
使用頻度が高いものが上の方に来て、かなり便利です。

--------------------------------
シンタックスごとのキーワード補完

言語ごとにキーワードを登録して補完ができるので、
例えばRubyでは$や@, ., ::といったキーワードに反応して補完ができます。
標準でも様々な言語に対応していますが、
「この言語に対応して欲しい」という要望があれば、可能な限り対応します。

--------------------------------
部分マッチ

Vim標準のキーワード補完では先頭マッチのみですが、neocomplcacheでは標準で部分マッチが有効です。
ただし、部分マッチによる候補は使用頻度が低いと考えられるため、下の方に配置されます。

--------------------------------
数字キーによるクイックマッチ

fuzzyfinderにインスパイア。
<TAB>や<C-p>, <C-n>を連打しなくても、補完候補横に表示されている
数値を入力するだけで、補完ができます。
ルーチンの改良により、二桁まで対応。
よくよく調べてみると、ATOKにも同様の機能がありますね。

--------------------------------
ディクショナリ補完、タグ補完

ディクショナリ補完やタグ補完も自前で実装しています。
ファイルタイプ別に登録することで、裏で自動的に読み込み、補完に使えます。
読み込むタグはカレントディレクトリごとに設定できます。
特殊なディクショナリとして、バッファディクショナリというものもあります。
これはインクルードファイルの補完用です。ただ、パーサをかかないと意味がありません。

--------------------------------
ワイルドカードによる検索結果の絞り込み

多数の候補がある場合、絞り込みが大変なので実装しました。
hoge*piyoと入力すると、hogeがつき、その後にpiyoとなるものにマッチします。
正規表現的にはhoge.*piyoと同じ意味です。

--------------------------------
結果のキャッシュによる高速化

プラグインの名前の元にもなっている機能です。
あまりに初期段階の補完が遅すぎて、我慢ならなくなったので実装しました。
バッファ全体を一定のキャッシュラインで分割し、
キャッシュライン単位でキーワードの収集を行います。

--------------------------------
MFU Dictionaryによる自動辞書登録

キーワードの使用頻度を解析し、よく使われているものを辞書ファイルに登録して、
次回読み込みます。辞書をいちいち用意する必要がないので便利です。
g:NeoComplCache_AlphabeticalOrder = 0でないと意味がありません（デフォルト）。
この機能を使用するには、
let g:NeoComplCache_EnableMFU = 1
とする必要があります。

追記：
最近のバージョンアップにより、文脈依存補完にも対応しました。
語のつながりを自動的に保存します。

--------------------------------
ディレクトリ補完

バッファ内で../といったディレクトリ名を入力するとファイル名の補完ができます。
autocomplpopで便利だったので、移植しました。
特にVimShellではこれがないと生きていけません。
<TAB>による補完が馬鹿らしくなります。

--------------------------------
カーソル後方のキーワードに応じた補完

|にカーソルがあるとする。
|e
ここでhogeを補完すると、hogのみが補完され、結果はhog|eとなる。
語の末尾が分かっているときに便利。
この機能はViViにインスパイアされました。

--------------------------------
SmartCase

これを設定すると、g:NeoComplCache_IgnoreCaseのとき（デフォルト）、
hoge -> hoge,Hogeにマッチ。
Hoge -> Hogeにマッチ。
となる。
つまり、大文字が含まれるときは大文字小文字を区別するようになります。
大文字小文字で意味が変わるRubyやCのマクロを使うときには便利です。
この機能を使用するには、
let g:NeoComplCache_SmartCase = 1
とする必要があります。

--------------------------------
豊富なカスタマイズ項目

調子に乗って機能を増やしていたら、たくさんの設定ができるようになっていました。
設定をカスタマイズすれば、Vim標準の補完機能をエミュレーションすることもできます。
ただしその場合、neocomplcacheを使う意味は薄れますが……。

--------------------------------
文脈依存補完（2-gram completion）

文脈を解析し、補完する機能が実験的に実装されました。
例えば、バッファ内に
hoge piyo
と入力しているとすると、hogeの後にはpiyoが来やすいと認識、
補完時にpiyoが上の方に来ます。
この機能を使用するには、
let g:NeoComplCache_PreviousKeywordCompletion = 1
とする必要があります。

--------------------------------
私の設定

" Don't use autocomplpop.
let g:AutoComplPop_NotEnableAtStartup = 1
" Use neocomplcache.
let g:NeoComplCache_EnableAtStartup = 1
" Use smartcase.
let g:NeoComplCache_SmartCase = 1
" Use mfu.
let g:NeoComplCache_EnableMFU = 1
" Use previous keyword completion.
let g:NeoComplCache_PreviousKeywordCompletion = 1

" Toggle when press <C-e>.
nnoremap <silent> <C-e> :<C-u>NeoComplCacheToggle<CR>

" Define dictionary.
let g:NeoComplCache_DictionaryFileTypeLists = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme' : $HOME.'/.gosh_completions'
            \ }
neocomplcache自体が標準で自分好みの設定になっているので、あまり凝った設定はしていません。
むしろ皆さんが使用するときは存分にカスタマイズすることを推奨します。
使用頻度を計算しないようにすれば、かなり高速化します。
VimShellの履歴ファイルを辞書として登録するのは便利なのでオススメ。

--------------------------------
しかし、低い知名度

autocomplpop: 14,600件
auto-complete.el: 24,900件
neocomplcache: 13件

                  Google調べ

現在の主なユーザーは自分だけ？

追記：
thincaさんに紹介されました！！
http://d.hatena.ne.jp/thinca/20090305/1236191531

メインで使っていただけているようで光栄です。
興味が出てきたので、Omni補完は今度実装するかもしれません。

--------------------------------
入手方法

http://github.com/Shougo/neocomplcache/tree/master （毎週更新）

ちゃんとしたドキュメントができたらwww.vim.orgにも登録したいです。

--------------------------------
使い方

まず、plugin/neocomplcache.vimを.vim/pluginにインストール。
そして、.vimrcで
let g:NeoComplCache_EnableAtStartup = 1
すると、Vimの起動時に自動的に有効になります。
手動で有効にしたいときには、
:NeoCompleCacheEnableを実行してください。

--------------------------------
サポート

何か問題があれば、http://www.lingr.com/room/vim-users.jpまで！（宣伝）

--------------------------------
まとめ

せっかく作ったので、皆さん使ってみてください。
夢は「名無しのVim使い」で紹介されること。

--------------------------------
次回はVimShellを紹介するかも……。

続く？

--------------------------------
更新履歴

2009/03/15      neocomplcache Ver.1.49に対応。
--------------------------------
